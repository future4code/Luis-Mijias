{"version":3,"sources":["components/IconeComContador/IconeComContador.js","img/favorite-white.svg","img/favorite.svg","img/comment_icon.svg","components/SecaoComentario/SecaoComentario.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["IconContainer","styled","div","IconImage","img","IconeComContador","props","alt","src","icone","onClick","onClickIcone","valorContador","CommentContainer","InputComentario","input","SecaoComentario","state","ValorInputComentario","onChangeComentario","event","console","log","target","value","setState","placeholder","this","onChange","aoEnviar","Component","PostContainer","PostHeader","PostFooter","UserPhoto","PostPhoto","Post","curtido","numeroCurtidas","comentando","numeroComentarios","onClickCurtida","newNumberLikes","onClickComentario","aoEnviarComentario","iconeCurtida","componenteComentario","iconeCoracaoPreto","iconeCoracaoBranco","fotoUsuario","nomeUsuario","fotoPost","iconeComentario","React","MainContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.462a84ca.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst IconContainer = styled.div`\r\n\tdisplay: flex;\r\n`\r\nconst IconImage = styled.img`\r\n\tmargin-right: 5px;\r\n`\r\n\r\nexport function IconeComContador(props) {\r\n\treturn <IconContainer>\r\n\t\t<IconImage alt={'Icone'} src={props.icone} onClick={props.onClickIcone}/>\r\n\t\t<p>{props.valorContador}</p>\r\n\t</IconContainer>\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/favorite-white.caaea4ca.svg\";","export default __webpack_public_path__ + \"static/media/favorite.8a6e6069.svg\";","export default __webpack_public_path__ + \"static/media/comment_icon.cf803b65.svg\";","import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CommentContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 5px;\r\n`\r\n\r\nconst InputComentario = styled.input`\r\n    width: 100%;\r\n    margin-right: 5px;\r\n`\r\n\r\nexport class SecaoComentario extends Component {\r\n\tstate = {ValorInputComentario: ''\r\n\r\n\t}\r\n\r\n\tonChangeComentario = (event) => {\r\n\t\tconsole.log(event.target.value)\r\n\t\tthis.setState({ValorInputComentario: event.target.value})\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <CommentContainer>\r\n\t\t\t<InputComentario\r\n\t\t\r\n\t\t\t\tplaceholder={'ComentÃ¡rio'}\r\n\t\t\t\tvalue={this.state.ValorInputComentario}\r\n\t\t\t\tonChange={this.onChangeComentario}\r\n\t\t\t/>\r\n\t\t\t<button onClick={this.props.aoEnviar}>Enviar</button>\r\n\t\t</CommentContainer>\r\n\t}\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport {IconeComContador} from '../IconeComContador/IconeComContador'\r\n\r\nimport iconeCoracaoBranco from '../../img/favorite-white.svg'\r\nimport iconeCoracaoPreto from '../../img/favorite.svg'\r\nimport iconeComentario from '../../img/comment_icon.svg'\r\nimport {SecaoComentario} from '../SecaoComentario/SecaoComentario'\r\n\r\nconst PostContainer = styled.div`\r\n  background-color: gray;\r\n  border: 1rem solid gray;\r\n  width: 25rem;\r\n  margin-bottom: 1rem;\r\n  \r\n`\r\n\r\nconst PostHeader = styled.div`\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 10px;\r\n  \r\n`\r\n\r\nconst PostFooter = styled.div`\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst UserPhoto = styled.img`\r\n  height: 2rem;\r\n  width:  2rem;\r\n  margin-right: 1rem;\r\n  border-radius: 50%;\r\n`\r\n\r\nconst PostPhoto = styled.img`\r\n  width: 100%;\r\n`\r\n\r\nclass Post extends React.Component {\r\n  state = {\r\n    curtido: false,\r\n    numeroCurtidas: 0,\r\n    comentando: false,\r\n    numeroComentarios: 0\r\n    \r\n  }\r\n\r\n  onClickCurtida = () => {\r\n    let newNumberLikes\r\n    if(this.state.curtido) {\r\n      newNumberLikes = this.state.numeroCurtidas - 1\r\n    } else {\r\n      newNumberLikes = this.state.numeroCurtidas + 1\r\n    }\r\n\r\n    this.setState({\r\n     curtido: !this.state.curtido,\r\n     numeroCurtidas: newNumberLikes\r\n     })    \r\n    console.log('Curtiu!')\r\n\r\n  }\r\n\r\n \r\n\r\n  onClickComentario = () => {\r\n    this.setState({\r\n      comentando: !this.state.comentando\r\n    })\r\n  }\r\n\r\n  aoEnviarComentario = () => {\r\n    this.setState({\r\n      comentando: false,\r\n      numeroComentarios: this.state.numeroComentarios + 1\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    let iconeCurtida\r\n\r\n    if(this.state.curtido) {\r\n      iconeCurtida = iconeCoracaoPreto\r\n    } else {     \r\n      iconeCurtida = iconeCoracaoBranco \r\n    }\r\n\r\n    let componenteComentario\r\n\r\n    if(this.state.comentando) {\r\n      componenteComentario = <SecaoComentario aoEnviar={this.aoEnviarComentario}/>\r\n    }\r\n\r\n    return <PostContainer>\r\n      <PostHeader>\r\n        <UserPhoto src={this.props.fotoUsuario} alt={'Imagem do usuario'}/>\r\n        <p>{this.props.nomeUsuario}</p>\r\n      </PostHeader>\r\n\r\n      <PostPhoto src={this.props.fotoPost} alt={'Imagem do post'}/>\r\n\r\n      <PostFooter>\r\n        <IconeComContador\r\n          icone={iconeCurtida}\r\n          onClickIcone={this.onClickCurtida}\r\n          valorContador={this.state.numeroCurtidas}\r\n        />\r\n\r\n        <IconeComContador\r\n          icone={iconeComentario}\r\n          onClickIcone={this.onClickComentario}\r\n          valorContador={this.state.numeroComentarios}\r\n        />\r\n      </PostFooter>\r\n      {componenteComentario}\r\n    </PostContainer>\r\n  }\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport Post from './components/Post/Post';\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 5%;\r\n`\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <MainContainer>\r\n        <Post\r\n          nomeUsuario={'Luis Carlos'}\r\n          fotoUsuario={'https://picsum.photos/50/50'}\r\n          fotoPost={'https://picsum.photos/200/151'}\r\n        />\r\n          <Post\r\n          nomeUsuario={'Marina'}\r\n          fotoUsuario={'https://picsum.photos/49/49'}\r\n          fotoPost={'https://picsum.photos/200/150'}\r\n        />\r\n          <Post\r\n          nomeUsuario={'Paulinha'}\r\n          fotoUsuario={'https://picsum.photos/51/51'}\r\n          fotoPost={'https://picsum.photos/200/152'}\r\n        />\r\n      </MainContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}